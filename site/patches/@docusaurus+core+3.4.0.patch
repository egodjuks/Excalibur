diff --git a/node_modules/@docusaurus/core/lib/commands/build.js b/node_modules/@docusaurus/core/lib/commands/build.js
index 46a4930..a4a898e 100644
--- a/node_modules/@docusaurus/core/lib/commands/build.js
+++ b/node_modules/@docusaurus/core/lib/commands/build.js
@@ -114,7 +114,7 @@ async function buildLocale({ siteDir, locale, cliOptions, }) {
     const { outDir, plugins, siteConfig } = props;
     const router = siteConfig.future.experimental_router;
     // We can build the 2 configs in parallel
-    const [{ clientConfig, clientManifestPath }, { serverConfig, serverBundlePath }] = await utils_3.PerfLogger.async('Creating webpack configs', () => Promise.all([
+    const [{ clientConfig, additionalPluginConfigs, clientManifestPath }, { serverConfig, serverBundlePath }] = await utils_3.PerfLogger.async('Creating webpack configs', () => Promise.all([
         getBuildClientConfig({
             props,
             cliOptions,
@@ -123,13 +123,14 @@ async function buildLocale({ siteDir, locale, cliOptions, }) {
             props,
         }),
     ]));
+    // throw new Error('here:', clientConfig.additionalPluginConfigs);
     // Run webpack to build JS bundle (client) and static html files (server).
     await utils_3.PerfLogger.async('Bundling with Webpack', () => {
         if (router === 'hash') {
-            return (0, utils_2.compile)([clientConfig]);
+            return (0, utils_2.compile)([clientConfig, ...additionalPluginConfigs]);
         }
         else {
-            return (0, utils_2.compile)([clientConfig, serverConfig]);
+            return (0, utils_2.compile)([clientConfig, serverConfig, ...additionalPluginConfigs]);
         }
     });
     const { collectedData } = await utils_3.PerfLogger.async('SSG', () => executeSSG({
@@ -211,24 +212,24 @@ async function getBuildClientConfig({ props, cliOptions, }) {
         minify: cliOptions.minify ?? true,
         bundleAnalyzer: cliOptions.bundleAnalyzer ?? false,
     });
-    let { config } = result;
-    config = (0, configure_1.executePluginsConfigureWebpack)({
+    let { config: tmpConfig } = result;
+    let [ config, additionalPluginConfigs ] = (0, configure_1.executePluginsConfigureWebpack)({
         plugins,
-        config,
+        config: tmpConfig,
         isServer: false,
         jsLoader: props.siteConfig.webpack?.jsLoader,
     });
-    return { clientConfig: config, clientManifestPath: result.clientManifestPath };
+    return { clientConfig: config, additionalPluginConfigs, clientManifestPath: result.clientManifestPath };
 }
 async function getBuildServerConfig({ props }) {
     const { plugins } = props;
     const result = await (0, server_1.default)({
         props,
     });
-    let { config } = result;
-    config = (0, configure_1.executePluginsConfigureWebpack)({
+    let { config: tmpConfig } = result;
+    let [ config ] = (0, configure_1.executePluginsConfigureWebpack)({
         plugins,
-        config,
+        config: tmpConfig,
         isServer: true,
         jsLoader: props.siteConfig.webpack?.jsLoader,
     });
diff --git a/node_modules/@docusaurus/core/lib/webpack/configure.js b/node_modules/@docusaurus/core/lib/webpack/configure.js
index 58558b6..c9baa77 100644
--- a/node_modules/@docusaurus/core/lib/webpack/configure.js
+++ b/node_modules/@docusaurus/core/lib/webpack/configure.js
@@ -77,12 +77,18 @@ function executePluginsConfigurePostCss({ plugins, config, }) {
 function executePluginsConfigureWebpack({ plugins, config, isServer, jsLoader, }) {
     // Step1 - Configure Webpack
     let resultConfig = config;
+    const additionalPluginConfigs = [];
     plugins.forEach((plugin) => {
-        const { configureWebpack } = plugin;
+        const { configureWebpack, configureAdditionalWebpack } = plugin;
         if (configureWebpack) {
             resultConfig = applyConfigureWebpack(configureWebpack.bind(plugin), // The plugin lifecycle may reference `this`.
             resultConfig, isServer, jsLoader, plugin.content);
         }
+        if (configureAdditionalWebpack) {
+          const newConfig = applyConfigureWebpack(configureAdditionalWebpack.bind(plugin),
+            {}, false, jsLoader, plugin.content);
+          additionalPluginConfigs.push(newConfig);
+        }
     });
     // Step2 - For client code, configure PostCSS
     // The order matters! We want to configure PostCSS on loaders
@@ -92,9 +98,9 @@ function executePluginsConfigureWebpack({ plugins, config, isServer, jsLoader, }
     if (!isServer) {
         resultConfig = executePluginsConfigurePostCss({
             plugins,
-            config: resultConfig,
+            config: resultConfig
         });
     }
-    return resultConfig;
+    return [resultConfig, additionalPluginConfigs];
 }
 exports.executePluginsConfigureWebpack = executePluginsConfigureWebpack;
